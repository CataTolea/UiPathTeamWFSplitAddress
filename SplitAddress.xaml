<Activity mc:Ignorable="sap sap2010 sads" x:Class="SplitAddress"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:maes="clr-namespace:Microsoft.Activities.Extensions.Statements;assembly=Microsoft.Activities.Extensions"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:ui="http://schemas.uipath.com/workflow/activities"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_FullAddress" Type="InArgument(x:String)" />
    <x:Property Name="out_AddressDictionary" Type="OutArgument(scg:Dictionary(x:String, x:String))" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>SplitAddress_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>UiPath.Cryptography</AssemblyReference>
      <AssemblyReference>UiPath.Java.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Python</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.PDF</AssemblyReference>
      <AssemblyReference>UiPath.Word</AssemblyReference>
      <AssemblyReference>Microsoft.VisualStudio.Services.Common</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="SplitAddress" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="s:String[]" Name="AddressSplit" />
      <Variable x:TypeArguments="x:String" Name="tempString" />
    </Sequence.Variables>
    <Assign DisplayName="Initialize the out_MasterDictionary" sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:String)">[out_AddressDictionary]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)">[new Dictionary(of String, String)]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Get initial string" sap2010:WorkflowViewState.IdRef="Assign_12">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[tempString]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[in_FullAddress.ToString.ToUpper.Trim]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Add fix keys" sap2010:WorkflowViewState.IdRef="Assign_13">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[tempString]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[tempString.Replace(",JUD ",",JUD. ").Replace(" JUD "," JUD. ").Replace(",MUN ",",MUN. ").Replace(" MUN ",",MUN. ").Replace(",ORS. ",",ORS. ").Replace(" ORS. ",",ORS. ").Replace(",SAT ",",SAT. ").Replace(" SAT ",",SAT. ").Replace(",COM ",",COM. ").Replace(" COM ",",COM. ").Replace(",SEC ",",SEC. ").Replace(" SEC ",",SEC. ").Replace(",STR ",",STR. ").Replace(" STR ",",STR. ").Replace(",BLV ",",BLV. ").Replace(" BLV ",",BLV. ").Replace(",BLD ",",BLD. ").Replace(" BLD ",",BLD. ").Replace(",BD ",",BD. ").Replace(" BD ",",BD. ").Replace(",SOS ",",SOS. ").Replace(" SOS ",",SOS. ").Replace(",DRM ",",DRM. ").Replace(" DRM ",",DRM. ").Replace(",CAL ",",CAL. ").Replace(" CAL ",",CAL. ").Replace(",ALE ",",ALE. ").Replace(" ALE ",",ALE. ").Replace(",INT ",",INT. ").Replace(" INT ",",INT. ").Replace(",NR ",",NR. ").Replace(" NR ",",NR. ").Replace(",BL ",",BL. ").Replace(" BL ",",BL. ").Replace(",SC ",",SC. ").Replace(" SC ",",SC. ").Replace(",ET ",",ET. ").Replace(" ET ",",ET. ").Replace(",AP ",",AP. ").Replace(" AP ",",AP. ")]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Add key words" sap2010:WorkflowViewState.IdRef="Assign_2">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[tempString]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String" xml:space="preserve">[tempString.Replace("*","").Replace(".",". ").Replace("  "," ").Replace("JUD. ","*JUD#").Replace("MUN. ","*MUN#").Replace("ORS. ","*ORS#").Replace("SAT. ","*SAT#").Replace("COM. ","*COM#").Replace("SEC. ","*SEC#").Replace("STR. ","*STR#").Replace("BLV. ","*STR#BLV ").Replace("BLD. ","*STR#BLD ").Replace("BD. ","*STR#BD ").Replace("SOS. ","*STR#SOS ").Replace("DRM. ","*STR#DRM ").Replace("CAL. ","*STR#CAL ").Replace("ALE. ","*STR#ALE ").Replace("INT. ","*STR#INT ").Replace("NR. ","*NR#").Replace("BL. ","*BL#").Replace("SC. ","*SC# ").Replace("ET. ","*ET#").Replace("AP. ","*AP#")]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Split pairs" sap2010:WorkflowViewState.IdRef="Assign_8">
      <Assign.To>
        <OutArgument x:TypeArguments="s:String[]">[AddressSplit]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="s:String[]">[tempString.Split("*"c)]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:ForEach x:TypeArguments="x:Object" CurrentIndex="{x:Null}" DisplayName="For Each pair" sap2010:WorkflowViewState.IdRef="ForEach`1_1" Values="[AddressSplit]">
      <ui:ForEach.Body>
        <ActivityAction x:TypeArguments="x:Object">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="x:Object" Name="item" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Body" sap2010:WorkflowViewState.IdRef="Sequence_3">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:String" Name="key" />
              <Variable x:TypeArguments="x:String" Name="value" />
            </Sequence.Variables>
            <If Condition="[String.IsNullOrEmpty(item.ToString)]" sap2010:WorkflowViewState.IdRef="If_4">
              <If.Else>
                <Sequence sap2010:WorkflowViewState.IdRef="Sequence_6">
                  <Assign DisplayName="initialize key" sap2010:WorkflowViewState.IdRef="Assign_11">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[key]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[String.Empty]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <If Condition="[item.ToString.Split(&quot;#&quot;c).Count=2]" DisplayName="if pair is valid" sap2010:WorkflowViewState.IdRef="If_3">
                    <If.Then>
                      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_5">
                        <Assign DisplayName="Assign key" sap2010:WorkflowViewState.IdRef="Assign_9">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[key]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[item.ToString.Split("#"c)(0)]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <Assign DisplayName="Assign value" sap2010:WorkflowViewState.IdRef="Assign_10">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[value]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[item.ToString.Split("#"c)(1).Replace(","," ").Trim]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </If.Then>
                  </If>
                  <If Condition="[key.Trim.Length&gt;0]" DisplayName="If key is valid" sap2010:WorkflowViewState.IdRef="If_2">
                    <If.Then>
                      <maes:AddToDictionary x:TypeArguments="x:String, x:String" Dictionary="[out_AddressDictionary]" DisplayName="Add to dictionary" sap2010:WorkflowViewState.IdRef="AddToDictionary`2_1" Key="[key]" Value="[value]" />
                    </If.Then>
                  </If>
                </Sequence>
              </If.Else>
            </If>
          </Sequence>
        </ActivityAction>
      </ui:ForEach.Body>
    </ui:ForEach>
    <sads:DebugSymbol.Symbol>d1VDOlxVc2Vyc1xjYXRhbGluLnRvbGVhXERvY3VtZW50c1xVaVBhdGhcUk9fSURfT0NSXEJ1c2luZXNzV29ya2Zsb3dzXFNwbGl0QWRkcmVzcy54YW1sJ1IDuAEOAgEBVwVeDgIBOV8FZg4CATRnBW4OAgEvbwV2DgIBKncFfg4CASV/BbYBEgIBAlxKXG0CATxZS1liAgE6ZDBkVgIBN2ExYT0CATVsMGy2CAIBMmkxaT0CATBxMXE9AgErfDJ8SgIBKHkzeUECASZ/lQF/pQECASOFAQuzARYCAQOKAQ2yARICAQSKARuKAUICAQWMARGwARwCAQeNAROUARwCAR+VAROqARgCARKrAROvARgCAQiSAT6SAUwCASKPAT+PAUQCASCVASGVAVACAROXAReoASICARSrASGrATkCAQmtARetAesBAgELmAEZnwEiAgEaoAEZpwEiAgEVrQHfAa0B6AECARCtAV2tAXYCAQ6tAdEBrQHYAQIBDJ0BRJ0BYgIBHZoBRZoBSgIBG6UBRKUBeAIBGKIBRaIBTAIBFg==</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="Assign_1" sap:VirtualizedContainerService.HintSize="502,60" />
      <sap2010:ViewStateData Id="Assign_12" sap:VirtualizedContainerService.HintSize="502,60" />
      <sap2010:ViewStateData Id="Assign_13" sap:VirtualizedContainerService.HintSize="502,60" />
      <sap2010:ViewStateData Id="Assign_2" sap:VirtualizedContainerService.HintSize="502,60" />
      <sap2010:ViewStateData Id="Assign_8" sap:VirtualizedContainerService.HintSize="502,60" />
      <sap2010:ViewStateData Id="Assign_11" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_9" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_10" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Sequence_5" sap:VirtualizedContainerService.HintSize="264,284">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_3" sap:VirtualizedContainerService.HintSize="242,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AddToDictionary`2_1" sap:VirtualizedContainerService.HintSize="378,138" />
      <sap2010:ViewStateData Id="If_2" sap:VirtualizedContainerService.HintSize="242,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_6" sap:VirtualizedContainerService.HintSize="264,366">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_4" sap:VirtualizedContainerService.HintSize="464,514" />
      <sap2010:ViewStateData Id="Sequence_3" sap:VirtualizedContainerService.HintSize="486,638">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ForEach`1_1" sap:VirtualizedContainerService.HintSize="502,772" />
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="524,1396">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="SplitAddress_1" sap:VirtualizedContainerService.HintSize="564,1476" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>